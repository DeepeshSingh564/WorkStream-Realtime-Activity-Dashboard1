{"file_contents":{"manage.py":{"content":"#!/usr/bin/env python\n\"\"\"Django's command-line utility for administrative tasks.\"\"\"\nimport os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()\n","size_bytes":670},"pyproject.toml":{"content":"[tool.poetry]\nauthors = [\"Your Name <you@example.com>\"]\ndescription = \"\"\nname = \"django-template\"\nversion = \"0.1.0\"\n[tool.poetry.dependencies]\nDjango = \"^5.0\"\npython = \"^3.10\"\n[tool.poetry.dev-dependencies]\n\n[tool.pyright]\n# https://github.com/microsoft/pyright/blob/main/docs/configuration.md\nuseLibraryCodeForTypes = true\nexclude = [\".cache\"]\n\n[tool.ruff]\n# https://beta.ruff.rs/docs/configuration/\nselect = ['E', 'W', 'F', 'I', 'B', 'C4', 'ARG', 'SIM']\nignore = ['W291', 'W292', 'W293']\n\n[build-system]\nrequires = [\"poetry-core>=1.0.0\"]\nbuild-backend = \"poetry.core.masonry.api\"","size_bytes":581},"accounts/__init__.py":{"content":"","size_bytes":0},"accounts/admin.py":{"content":"from django.contrib import admin\n\n# Register your models here.\n","size_bytes":63},"accounts/apps.py":{"content":"from django.apps import AppConfig\n\n\nclass AccountsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'accounts'\n","size_bytes":148},"accounts/models.py":{"content":"from django.db import models\n\n# Create your models here.\n","size_bytes":57},"accounts/serializers.py":{"content":"from django.db.models.fields import CharField\nfrom rest_framework import serializers\nfrom django.contrib.auth.models import User\n\n\nclass UserSignUpSerializer(serializers.ModelSerializer):\n  password = serializers.CharField(write_only=True)\n\n  class Meta:\n    model = User\n    fields = ['username','email', 'password']\n\n  def create(self, validated_data):\n    user = User.objects.create_user(\n      username = validated_data['username'],\n      email = validated_data['email'],\n      password = validated_data['password']\n    )\n    return user\n\n\nclass UserLoginSerializer(serializers.Serializer):\n  username = serializers.CharField()\n  password = serializers.CharField(write_only=True)\n    \n","size_bytes":689},"accounts/tests.py":{"content":"from django.test import TestCase\n\n# Create your tests here.\n","size_bytes":60},"accounts/urls.py":{"content":"from django.urls import path\nfrom . import views\nfrom .views import  SignUpView, LoginView, LogoutView, signup_page\n\n\nurlpatterns=[\n  path('', views.home , name=\"home\"),\n  path('signup/', views.signup_page, name='signup_page'),\n  path('login/', views.login_page, name='login_page'),\n  # path(\"auth/\", auth_page, name=\"auth_page\" ),#frontend auth page\n  path('api/signup/', SignUpView.as_view(), name='api_signup'),\n  path('api/login/', LoginView.as_view(), name='api_login'),\n  path('api/logout/', LogoutView.as_view(), name='api_logout'),\n]","size_bytes":541},"accounts/views.py":{"content":"from django.http import request\nfrom django.shortcuts import render\nfrom rest_framework.response import Response\nfrom rest_framework import status\nfrom django.contrib.auth import authenticate\nfrom rest_framework.authtoken.models import Token\nfrom rest_framework.authentication import TokenAuthentication\nfrom .serializers import UserSignUpSerializer, UserLoginSerializer\nfrom rest_framework.views import APIView\nfrom django.utils.decorators import method_decorator\nfrom django.views.decorators.csrf import csrf_exempt\n\n# Create your views here.\n\ndef home(request):\n  return render(request , \"accounts/home.html\")\n\n\ndef signup_page(request):\n  return render(request, \"accounts/signup.html\")\n\ndef login_page(request):\n  return render(request, \"accounts/login.html\")\n\n\n\n# def auth_page(request):\n#   return render(request, \"accounts/auth.html\")\n\n@method_decorator(csrf_exempt, name=\"dispatch\")\nclass SignUpView(APIView):\n  def post(self, request):\n    serializer = UserSignUpSerializer(data=request.data)\n    if serializer.is_valid():\n      user = serializer.save()\n      token, _ = Token.objects.get_or_create(user=user)\n      return Response({\"token\": token.key, \"username\": user.username})\n\n    return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n\n@method_decorator(csrf_exempt, name=\"dispatch\")\nclass LoginView(APIView):\n  def post(self, request):\n    serializer = UserLoginSerializer(data=request.data)\n    if serializer.is_valid():\n      user = authenticate(\n        username = serializer.validated_data['username'],\n        password = serializer.validated_data['password']\n      )\n      if user:\n        token, _ = Token.objects.get_or_create(user=user)\n        return Response({\"token\": token.key, \"username\": user.username})\n\n      return Response({\"error\": \"Invalid credentials\"}, status=status.HTTP_401_UNAUTHORIZED)\n\n    return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n\n@method_decorator(csrf_exempt, name=\"dispatch\")\nclass LogoutView(APIView):\n  authentication_classes = [TokenAuthentication]\n\n  def post(self, request):\n    request.user.auth_token.delete()\n    return Response({\"message\":\"Logged out successfully\"})","size_bytes":2168},"activity/__init__.py":{"content":"","size_bytes":0},"activity/admin.py":{"content":"from django.contrib import admin\nfrom .models import ActivityLog\n# Register your models here.\n\n@admin.register(ActivityLog)\nclass ActivityLogAdmin(admin.ModelAdmin):\n    list_display = ('user', 'activity_name', 'duration', 'timestamp')\n    list_filter = ('activity_name', 'timestamp')\n    search_fields = ('activity_name', 'user__username')\n","size_bytes":341},"activity/apps.py":{"content":"from django.apps import AppConfig\n\n\nclass ActivityConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'activity'\n\n    def ready(self):\n        import activity.signals\n","size_bytes":202},"activity/consumers.py":{"content":"import json\nimport sys\nfrom channels.generic.websocket import AsyncWebsocketConsumer\nfrom channels.db import database_sync_to_async\n\n\nclass ActivityConsumer(AsyncWebsocketConsumer):\n    async def connect(self):\n        user = self.scope.get(\"user\", None)\n\n        # If not authenticated, reject connection\n        if not user or not user.is_authenticated:\n            await self.close()\n            return\n\n        self.user = user\n        self.group_name = f\"user_{user.id}\"\n\n        print(f\"âœ… WebSocket connected for user {user.username}\", file=sys.stderr, flush=True)\n\n        # Join per-user group\n        await self.channel_layer.group_add(self.group_name, self.channel_name)\n        await self.accept()\n\n        # Send welcome/system message\n        await self.send(text_data=json.dumps({\n            \"type\": \"system\",\n            \"message\": f\"Connected to activity log as {user.username}\"\n        }))\n\n    async def disconnect(self, close_code):\n        if hasattr(self, \"group_name\"):\n            await self.channel_layer.group_discard(self.group_name, self.channel_name)\n\n    async def activity_message(self, event):\n        # Event sent from views.perform_create\n        print(f\"ðŸ“¡ Sending activity to {self.user.username}\", file=sys.stderr, flush=True)\n\n        await self.send(text_data=json.dumps({\n            \"type\": \"activity\",\n            \"data\": event[\"data\"]\n        }))\n","size_bytes":1394},"activity/models.py":{"content":"from django.db import models\nfrom django.contrib.auth.models import User\n\n# Create your models here.\n\nclass ActivityLog(models.Model):\n  user = models.ForeignKey(User, on_delete=models.CASCADE,related_name=\"activities\")\n  activity_name = models.CharField(max_length=100)# e.g., \"coding\", \"meeting\"\n  duration = models.IntegerField()#in minutes\n  timestamp = models.DateTimeField(auto_now_add=True)\n\n  def __str__(self):\n    return f\"{self.user.username} - {self.activity_name} ({self.duration}mins) \"\n\n","size_bytes":502},"activity/routing.py":{"content":"from django.urls import re_path\nfrom . import consumers\n\nwebsocket_urlpatterns = [\n    re_path(r\"ws/activities/$\", consumers.ActivityConsumer.as_asgi()),\n]\n","size_bytes":156},"activity/serializers.py":{"content":"from rest_framework import serializers\nfrom .models import ActivityLog\n\n\nclass ActivityLogSerializer(serializers.ModelSerializer):\n  user = serializers.StringRelatedField(read_only=True) #<- shows username, but not writable\n  \n  class Meta:\n    model = ActivityLog\n    fields = ['id', 'user', 'activity_name', 'duration', 'timestamp']","size_bytes":334},"activity/signals.py":{"content":"# from django.db.models.signals import post_save\n# from django.dispatch import receiver\n# from .models import ActivityLog\n# from asgiref.sync import async_to_sync\n# from channels.layers import get_channel_layer\n# import json\n\n\n# @receiver(post_save, sender=ActivityLog)\n# def broadcast_activity(sender, instance, created, **kwargs):\n#   if created:\n#     channel_layer = get_channel_layer()\n#     async_to_sync(channel_layer.group_send)(\n#       \"activities\",{\n#         \"type\":\"activity_message\",\n#         \"message\": f\"{instance.user.username} did {instance.activity_name} ({instance.duration} mins)\"\n#       }\n#     )","size_bytes":620},"activity/tests.py":{"content":"from django.test import TestCase\n\n# Create your tests here.\n","size_bytes":60},"activity/urls.py":{"content":"from django.urls import path\nfrom .import views\nfrom .views import ActivityLogListCreateView, ActivityLogDetailView\nfrom rest_framework.authtoken.views import obtain_auth_token\n\n\n\nurlpatterns=[\n  # path('', views.index, name='index'),\n  path('activities/', ActivityLogListCreateView.as_view(),name='activity-list'),\n  path('activities/<int:pk>/', ActivityLogDetailView.as_view(),name='activity-detail'),\n  path(\"test/\", views.activity_test, name=\"activity_test\"),\n  path(\"dashboard/\", views.activity_dashboard, name=\"activity_dashboard\"),\n  path(\"token/\", obtain_auth_token, name=\"api_token\")\n]","size_bytes":594},"activity/views.py":{"content":"from django.shortcuts import render\nfrom rest_framework import generics\nfrom rest_framework.authentication import TokenAuthentication\nfrom rest_framework.permissions import IsAuthenticated\nfrom .models import ActivityLog\nfrom .serializers import ActivityLogSerializer\nfrom asgiref.sync import async_to_sync\nfrom channels.layers import get_channel_layer\nimport sys\n\n\ndef activity_test(request):\n    return render(request, \"activity/test.html\")\n\n\ndef activity_dashboard(request):\n    return render(request, \"activity/dashboard.html\")\n\n\nclass ActivityLogListCreateView(generics.ListCreateAPIView):\n    serializer_class = ActivityLogSerializer\n    authentication_classes = [TokenAuthentication]\n    permission_classes = [IsAuthenticated]\n\n    def get_queryset(self):\n        # âœ… Only return activities of logged-in user\n        return ActivityLog.objects.filter(user=self.request.user).order_by('-timestamp')\n\n    def perform_create(self, serializer):\n        # âœ… Save activity for the logged-in user\n        activity = serializer.save(user=self.request.user)\n        serialized = ActivityLogSerializer(activity).data\n\n        # Debug print\n        print(\"Broadcasting (views.perform_create):\", serialized, file=sys.stderr, flush=True)\n\n        # Broadcast to WebSocket\n        channel_layer = get_channel_layer()\n        async_to_sync(channel_layer.group_send)(\n            f\"user_{self.request.user.id}\",  # âœ… per-user channel group\n            {\n                \"type\": \"activity_message\",\n                \"data\": serialized\n            }\n        )\n\n\nclass ActivityLogDetailView(generics.RetrieveUpdateDestroyAPIView):\n    serializer_class = ActivityLogSerializer\n    authentication_classes = [TokenAuthentication]\n    permission_classes = [IsAuthenticated]\n\n    def get_queryset(self):\n        # âœ… A user can only fetch/update/delete their own activities\n        return ActivityLog.objects.filter(user=self.request.user)\n","size_bytes":1929},"django_project/__init__.py":{"content":"","size_bytes":0},"django_project/asgi.py":{"content":"\"\"\"\nASGI config for django_project project.\n\nIt exposes the ASGI callable as a module-level variable named ``application``.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/5.0/howto/deployment/asgi/\n\"\"\"\n\nimport os\n\nimport os\nfrom django.core.asgi import get_asgi_application\nfrom channels.routing import ProtocolTypeRouter, URLRouter\nfrom channels.auth import AuthMiddlewareStack\nimport activity.routing\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django_project.settings')\n\napplication = ProtocolTypeRouter({\n  \"http\": get_asgi_application(),\n  \"websocket\": AuthMiddlewareStack(\n    URLRouter(\n      activity.routing.websocket_urlpatterns\n    )\n  ),\n})\n\n# application = get_asgi_application()\n","size_bytes":726},"django_project/settings.py":{"content":"\"\"\"\nDjango settings for django_project project.\n\nGenerated by 'django-admin startproject' using Django 5.0.1.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/5.0/topics/settings/\n\nFor the full list of settings and their values, see\nhttps://docs.djangoproject.com/en/5.0/ref/settings/\n\"\"\"\n\nimport os\nfrom pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-4ju2n@$f9d0c=h)_g0lbb%k9&@rf(xa$d$g$&5ri$uf)*gev^4'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = False\n\nALLOWED_HOSTS = os.environ[\"REPLIT_DOMAINS\"].split(',')\nCSRF_TRUSTED_ORIGINS = [\n    \"https://\" + domain for domain in os.environ[\"REPLIT_DOMAINS\"].split(',')\n]\n\n\nREST_FRAMEWORK = {\n    \"DEFAULT_AUTHENTICATION_CLASSES\": (\n        \"rest_framework.authentication.BasicAuthentication\",  # no CSRF\n        \"rest_framework.authentication.TokenAuthentication\",\n        \"rest_framework.authentication.SessionAuthentication\",\n    ),\n    'DEFAULT_PERMISSION_CLASSES': (\n        'rest_framework.permissions.IsAuthenticated',\n    )\n}\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'rest_framework',\n    'activity',\n    'channels',\n    'rest_framework.authtoken',\n    'accounts',\n]\n\nASGI_APPLICATION = 'django_project.asgi.application'\n\n\n\n# settings.py\nCHANNEL_LAYERS = {\n    \"default\": {\n        \"BACKEND\": \"channels_redis.core.RedisChannelLayer\",\n        \"CONFIG\": {\n            \"hosts\": [(\"127.0.0.1\", 6379)],\n        },\n    },\n}\n\n\n\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\n# for API only â€” allow unsafe POST without CSRF\nCSRF_TRUSTED_ORIGINS = [\"https://*.replit.dev\"]\n\n# Only use clickjacking protection in deployments because the Development Web View uses\n# iframes and needs to be a cross origin.\nif (\"REPLIT_DEPLOYMENT\" in os.environ):\n    MIDDLEWARE.append('django.middleware.clickjacking.XFrameOptionsMiddleware')\n\nROOT_URLCONF = 'django_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'django_project.wsgi.application'\n\n# Database\n# https://docs.djangoproject.com/en/5.0/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n# Password validation\n# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME':\n        'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME':\n        'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME':\n        'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME':\n        'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n# Internationalization\n# https://docs.djangoproject.com/en/5.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\n\nSTATIC_URL = 'static/'\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n\n\n# Redirect after login\nLOGIN_REDIRECT_URL = '/api/activities/'  # or any page you want\nLOGOUT_REDIRECT_URL = '/'     # optional, after logout\n\n","size_bytes":4638},"django_project/urls.py":{"content":"\"\"\"\nURL configuration for django_project project.\n\nThe `urlpatterns` list routes URLs to views. For more information please see:\n    https://docs.djangoproject.com/en/5.0/topics/http/urls/\nExamples:\nFunction views\n    1. Add an import:  from my_app import views\n    2. Add a URL to urlpatterns:  path('', views.home, name='home')\nClass-based views\n    1. Add an import:  from other_app.views import Home\n    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')\nIncluding another URLconf\n    1. Import the include() function: from django.urls import include, path\n    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))\n\"\"\"\nfrom django.contrib import admin\nfrom django.urls import path, include\nfrom django.http import HttpResponse\n\n\n\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('api/', include('activity.urls')),\n    path(\"activity/\", include(\"activity.urls\")),\n    path('api-auth/', include('rest_framework.urls')),\n    path(\"\", include(\"accounts.urls\")),\n    \n]\n","size_bytes":1012},"django_project/wsgi.py":{"content":"\"\"\"\nWSGI config for django_project project.\n\nIt exposes the WSGI callable as a module-level variable named ``application``.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/5.0/howto/deployment/wsgi/\n\"\"\"\n\nimport os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django_project.settings')\n\napplication = get_wsgi_application()\n","size_bytes":405},"accounts/migrations/__init__.py":{"content":"","size_bytes":0},"activity/migrations/0001_initial.py":{"content":"# Generated by Django 5.0.2 on 2025-09-02 16:46\n\nimport django.db.models.deletion\nfrom django.conf import settings\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='ActivityLog',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('activity_name', models.CharField(max_length=100)),\n                ('duration', models.IntegerField()),\n                ('timestamp', models.DateTimeField(auto_now_add=True)),\n                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activities', to=settings.AUTH_USER_MODEL)),\n            ],\n        ),\n    ]\n","size_bytes":907},"activity/migrations/__init__.py":{"content":"","size_bytes":0}},"version":1}